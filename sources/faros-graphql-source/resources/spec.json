{
  "documentationUrl": "https://docs.faros.ai",
  "connectionSpecification": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "GraphQL Spec",
    "type": "object",
    "required": [
      "api_key",
      "api_url",
      "graph"
    ],
    "additionalProperties": true,
    "properties": {
      "api_url": {
        "order": 0,
        "type": "string",
        "title": "API URL",
        "description": "The Faros API URL.",
        "default": "https://prod.api.faros.ai",
        "examples": [
          "https://prod.api.faros.ai"
        ]
      },
      "api_key": {
        "order": 1,
        "title": "API Key",
        "type": "string",
        "description": "The Faros API key to use to access the API.",
        "airbyte_secret": true
      },
      "graph": {
        "order": 2,
        "type": "string",
        "title": "Graph name",
        "description": "The graph name."
      },
      "graphql_api": {
        "order": 3,
        "type": "string",
        "title": "GraphQL API",
        "description": "The version of GraphQL API for reads.",
        "default": "v1",
        "enum": [
          "v1",
          "v2"
        ]
      },
      "query": {
        "order": 4,
        "type": "string",
        "title": "GraphQL query",
        "description": "The query to execute.",
        "multiline": true
      },
      "page_size": {
        "order": 5,
        "type": "integer",
        "title": "Page Size",
        "description": "Page size to use when paginating through query results.",
        "default": 100
      },
      "result_model": {
        "order": 6,
        "type": "string",
        "title": "Result model",
        "description": "Where to place each of the query results in their corresponding output records. E.g Nested - { vcs { pullRequests { nodes: [<record>] } } }, Flat - { vcs_PullRequest: <record> }",
        "default": "Nested",
        "enum": [
          "Nested",
          "Flat"
        ]
      },
      "adapt_v1_query": {
        "order": 7,
        "type": "boolean",
        "title": "Adapt V1 query",
        "default": false,
        "description": "Indicate that the input query conforms to the V1 schema provided in 'Legacy V1 schema' and should be translated into V2 to query the graph. Requires the 'query' and 'Legacy V1 schema' fields to be present and the 'GraphQL API' to be V2"
      },
      "legacy_v1_schema": {
        "order": 8,
        "type": "string",
        "title": "Legacy V1 schema",
        "description": "Legacy V1 schema as a gzip compressed, base 64 encoded text. Only used when 'Adapt V1 query' is enabled.",
        "multiline": true
      },
      "replace_origin_map": {
        "order": 9,
        "type": "string",
        "title": "Replace Records Origin",
        "description": "JSON map to replace records origin values, where each entry (origin1, origin2) indicates that the output records' origin property should be replaced from 'origin1' by 'origin2'",
        "multiline": true,
        "default": "{}",
        "examples": [
          "{ \"originA\": \"originB\" }"
        ]
      }
    }
  }
}
