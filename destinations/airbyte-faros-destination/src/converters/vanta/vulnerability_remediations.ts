import {AirbyteRecord} from 'faros-airbyte-cdk';
import {VulnerabilityRemediation} from 'faros-airbyte-common/vanta';
import {Utils} from 'faros-js-client';

import {DestinationModel, DestinationRecord, StreamContext} from '../converter';
import {VantaConverter} from './common';

export abstract class VulnerabilityRemediations extends VantaConverter {
  readonly destinationModels: ReadonlyArray<DestinationModel> = [];

  async convert(
    record: AirbyteRecord,
    ctx: StreamContext
  ): Promise<ReadonlyArray<DestinationRecord>> {
    return this.convertVulnerabilityRemediationRecord(
      record?.record?.data as VulnerabilityRemediation,
      ctx
    );
  }

  async convertVulnerabilityRemediationRecord(
    data: VulnerabilityRemediation,
    ctx: StreamContext
  ): Promise<ReadonlyArray<DestinationRecord>> {
    // We create sec_Vulnerability per finding, not per unique vulnerability.
    // So sec_Vulnerability will be tied either to one vcs_RepositoryVulnerability or cicd_ArtifactVulnerability.
    return [
      {
        model: 'vcs_RepositoryVulnerability__Update',
        record: {
          at: Date.now(),
          where: {
            vulnerability: {
              uid: data.vulnerabilityId,
              source: this.source,
            },
          },
          mask: ['resolvedAt', 'status'],
          patch: {
            resolvedAt: data.remediationDate,
            status: {
              category: 'Resolved',
              detail: 'Resolved',
            },
          },
        },
      },
      {
        model: 'cicd_ArtifactVulnerability__Update',
        record: {
          at: Date.now(),
          where: {
            vulnerability: {
              uid: data.vulnerabilityId,
              source: this.source,
            },
          },
          mask: ['resolvedAt', 'status'],
          patch: {
            resolvedAt: Utils.toDate(data.remediationDate),
            status: {
              category: 'Resolved',
              detail: 'Resolved',
            },
          },
        },
      },
    ];
  }
}
